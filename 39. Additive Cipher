#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h> 
#define MAX_LEN 1000
#define ALPHABET_SIZE 26
const char *english_order = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
typedef struct {
    int key;
    int score;
    char plaintext[MAX_LEN];
} Candidate;
void decrypt(char *cipher, char *plain, int key) {
    for (int i = 0; cipher[i] != '\0'; i++) {
        char c = cipher[i];
        if (isalpha(c)) {
            char base = isupper(c) ? 'A' : 'a';
            plain[i] = (c - base - key + 26) % 26 + base;
        } else {
            plain[i] = c;
        }
    }
    plain[strlen(cipher)] = '\0';
}
int scoreText(char *text) {
    int freq[ALPHABET_SIZE] = {0};
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            freq[toupper(text[i]) - 'A']++;
        }
    }
    int score = 0;
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        char ch = english_order[i];
        score += freq[ch - 'A'] * (ALPHABET_SIZE - i); 
    }
    return score;
}
int compare(const void *a, const void *b) {
    return ((Candidate *)b)->score - ((Candidate *)a)->score;
}
int main() {
    char ciphertext[MAX_LEN];
    int n;
    printf("Enter the ciphertext:\n");
    scanf(" %[^\n]", ciphertext);
    printf("Enter how many top guesses to show (max 26): ");
    scanf("%d", &n);
    if (n > 26) n = 26;
    Candidate candidates[26];
    for (int key = 0; key < 26; key++) {
        decrypt(ciphertext, candidates[key].plaintext, key);
        candidates[key].key = key;
        candidates[key].score = scoreText(candidates[key].plaintext);
    }
    qsort(candidates, 26, sizeof(Candidate), compare);
    printf("\nTop %d possible plaintexts:\n", n);
    for (int i = 0; i < n; i++) {
        printf("Option %d (Key = %d):\n%s\n\n", i + 1, candidates[i].key, candidates[i].plaintext);
    }
    return 0;
}
