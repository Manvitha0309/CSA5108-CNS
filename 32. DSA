#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
unsigned int hash_message(const char* msg) {
    unsigned int hash = 0;
    for (int i = 0; msg[i]; i++)
        hash = (hash * 31 + msg[i]) % 10007;
    return hash;
}
unsigned int rsa_sign(const char* msg, unsigned int d, unsigned int n) {
    unsigned int h = hash_message(msg);
    unsigned int sig = 1;
    for (int i = 0; i < d; i++)
        sig = (sig * h) % n;
    return sig;
}
unsigned int dsa_sign(const char* msg, unsigned int private_key, unsigned int q) {
    unsigned int h = hash_message(msg);
    unsigned int k = rand() % (q - 1) + 1;  
    unsigned int sig = (h * k + private_key) % q;  
    return sig;
}
int main() {
    srand(time(NULL));
    const char* message = "SecureMessage";
    unsigned int rsa_n = 3233;
    unsigned int rsa_d = 17;    
    unsigned int dsa_private = 23;
    unsigned int dsa_q = 101;
    printf("Message: \"%s\"\n\n", message);
    unsigned int rsa_sig1 = rsa_sign(message, rsa_d, rsa_n);
    unsigned int rsa_sig2 = rsa_sign(message, rsa_d, rsa_n);
    printf("RSA Signatures:\n");
    printf("Signature 1: %u\n", rsa_sig1);
    printf("Signature 2: %u\n", rsa_sig2);
    printf("âœ… RSA produces same signature for same message.\n\n");
    unsigned int dsa_sig1 = dsa_sign(message, dsa_private, dsa_q);
    unsigned int dsa_sig2 = dsa_sign(message, dsa_private, dsa_q);
    printf("DSA Signatures:\n");
    printf("Signature 1: %u\n", dsa_sig1);
    printf("Signature 2: %u\n", dsa_sig2);
    if (dsa_sig1 != dsa_sig2)
        printf("DSA produces different signatures due to random nonce k.\n");
    else
        printf("Unexpected result â€” signatures matched (rare).\n");
    return 0;
}
