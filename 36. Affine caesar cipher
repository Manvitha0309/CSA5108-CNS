#include <stdio.h>
#include <string.h>
#include <ctype.h>
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++) {
        if ((a * x) % m == 1)
            return x;
    }
    return -1; 
}
char encryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        int p = ch - 'A';
        int c = (a * p + b) % 26;
        return c + 'A';
    }
    return ch; 
}
char decryptChar(char ch, int a, int b) {
    if (isalpha(ch)) {
        ch = toupper(ch);
        int a_inv = modInverse(a, 26);
        if (a_inv == -1) return '?'; 
        int c = ch - 'A';
        int p = (a_inv * (c - b + 26)) % 26;
        return p + 'A';
    }
    return ch;
}
int main() {
    char plaintext[100], ciphertext[100], decrypted[100];
    int a, b;
    printf("Enter values of a and b (a must be coprime with 26): ");
    scanf("%d %d", &a, &b);
    if (gcd(a, 26) != 1) {
        printf("Invalid 'a' value! It must be coprime with 26.\n");
        return 1;
    }
    printf("Enter the plaintext (letters only, no special characters): ");
    scanf(" %[^\n]", plaintext); 
    int len = strlen(plaintext);
    for (int i = 0; i < len; i++) {
        ciphertext[i] = encryptChar(plaintext[i], a, b);
    }
    ciphertext[len] = '\0';
    printf("Encrypted Text: %s\n", ciphertext);
    for (int i = 0; i < len; i++) {
        decrypted[i] = decryptChar(ciphertext[i], a, b);
    }
    decrypted[len] = '\0';
    printf("Decrypted Text: %s\n", decrypted);
    return 0;
}
