#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>
#define ALPHABET_SIZE 26
#define MAX_TEXT_LEN 1000
#define MAX_RESULTS 10
const char *englishFreq = "ETAOINSHRDLCUMWFGYPBVKJXQZ";
typedef struct {
    char letter;
    int count;
} Frequency;
int compareFreq(const void *a, const void *b) {
    return ((Frequency *)b)->count - ((Frequency *)a)->count;
}
void analyzeFrequency(const char *text, Frequency freq[]) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        freq[i].letter = 'A' + i;
        freq[i].count = 0;
    }

    for (int i = 0; text[i] != '\0'; i++) {
        if (isalpha(text[i])) {
            char ch = toupper(text[i]);
            freq[ch - 'A'].count++;
        }
    }

    qsort(freq, ALPHABET_SIZE, sizeof(Frequency), compareFreq);
}
void generateMapping(Frequency freq[], char map[26], int offset) {
    for (int i = 0; i < ALPHABET_SIZE; i++) {
        if (i + offset < ALPHABET_SIZE) {
            map[freq[i].letter - 'A'] = englishFreq[i + offset];
        } else {
            map[freq[i].letter - 'A'] = freq[i].letter; 
        }
    }
}
void applyMapping(const char *cipher, char *output, char map[26]) {
    for (int i = 0; cipher[i] != '\0'; i++) {
        if (isalpha(cipher[i])) {
            char upper = toupper(cipher[i]);
            char subst = map[upper - 'A'];
            output[i] = islower(cipher[i]) ? tolower(subst) : subst;
        } else {
            output[i] = cipher[i]; 
        }
    }
    output[strlen(cipher)] = '\0';
}
int main() {
    char ciphertext[MAX_TEXT_LEN];
    int topN;
    printf("Enter the ciphertext (uppercase or lowercase letters only):\n");
    scanf(" %[^\n]", ciphertext);
    printf("Enter number of top possible plaintexts to display: ");
    scanf("%d", &topN);
    if (topN > MAX_RESULTS) topN = MAX_RESULTS;
    Frequency freq[ALPHABET_SIZE];
    char plaintext[MAX_TEXT_LEN];
    char map[26];
    analyzeFrequency(ciphertext, freq);
    printf("\nTop %d possible plaintexts:\n", topN);
    for (int i = 0; i < topN; i++) {
        generateMapping(freq, map, i); 
        applyMapping(ciphertext, plaintext, map);
        printf("\nOption %d:\n%s\n", i + 1, plaintext);
    }
    return 0;
}
