#include <stdio.h>
#include <string.h>
#define MOD 26
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1;
}
int determinant(int matrix[2][2]) {
    return (matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]) % MOD;
}
int inverseMatrix(int matrix[2][2], int inv[2][2]) {
    int det = determinant(matrix);
    det = (det + MOD) % MOD;
    int detInv = modInverse(det, MOD);
    if (detInv == -1) return 0;
    inv[0][0] =  matrix[1][1] * detInv % MOD;
    inv[0][1] = -matrix[0][1] * detInv % MOD;
    inv[1][0] = -matrix[1][0] * detInv % MOD;
    inv[1][1] =  matrix[0][0] * detInv % MOD;
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            if (inv[i][j] < 0)
                inv[i][j] += MOD;
    return 1;
}
void multiplyMatrix(int a[2][2], int b[2][2], int result[2][2]) {
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++) {
            result[i][j] = 0;
            for (int k = 0; k < 2; k++)
                result[i][j] += a[i][k] * b[k][j];
            result[i][j] %= MOD;
        }
}
void textToMatrix(char *text, int matrix[2][2]) {
    for (int i = 0; i < 4; i++) {
        text[i] = toupper(text[i]);
        matrix[i / 2][i % 2] = text[i] - 'A';
    }
}
void encrypt(char *pt, char *ct, int key[2][2]) {
    int p[2];
    for (int i = 0; i < 2; i++)
        p[i] = toupper(pt[i]) - 'A';
    for (int i = 0; i < 2; i++) {
        int val = 0;
        for (int j = 0; j < 2; j++)
            val += key[i][j] * p[j];
        ct[i] = (val % MOD) + 'A';
    }
    ct[2] = '\0';
}
int main() {
    char plaintext[] = "HELP";
    char ciphertext[] = "IZWX";
    int P[2][2], C[2][2], P_inv[2][2], Key[2][2];
    textToMatrix(plaintext, P);
    textToMatrix(ciphertext, C);
    printf("Known plaintext matrix:\n");
    printf("%d %d\n%d %d\n", P[0][0], P[0][1], P[1][0], P[1][1]);
    printf("Known ciphertext matrix:\n");
    printf("%d %d\n%d %d\n", C[0][0], C[0][1], C[1][0], C[1][1]);
    if (!inverseMatrix(P, P_inv)) {
        printf("Matrix inversion failed. Plaintext matrix is not invertible mod 26.\n");
        return 1;
    }
    multiplyMatrix(C, P_inv, Key);
    printf("Recovered Key Matrix:\n");
    printf("%d %d\n%d %d\n", Key[0][0], Key[0][1], Key[1][0], Key[1][1]);
    char test[] = "HI";
    char encrypted[3];
    encrypt(test, encrypted, Key);
    printf("Test Encryption of '%s': %s\n", test, encrypted);
    return 0;
}
