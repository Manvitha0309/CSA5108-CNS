#include <stdio.h>
#include <stdint.h>
#include <string.h>
#define BLOCK_SIZE 8
void xor_cipher(uint8_t *input, uint8_t *key, uint8_t *output) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        output[i] = input[i] ^ key[i];
    }
}
int add_padding(uint8_t *data, int len) {
    int pad_len = BLOCK_SIZE - (len % BLOCK_SIZE);
    data[len] = 0x80;
    for (int i = 1; i < pad_len; i++)
        data[len + i] = 0x00;
    return len + pad_len;
}
void ecb_encrypt(uint8_t *data, int len, uint8_t *key, uint8_t *output) {
    for (int i = 0; i < len; i += BLOCK_SIZE)
        xor_cipher(data + i, key, output + i);
}
void cbc_encrypt(uint8_t *data, int len, uint8_t *key, uint8_t *iv, uint8_t *output) {
    uint8_t temp[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        for (int j = 0; j < BLOCK_SIZE; j++)
            temp[j] = data[i + j] ^ iv[j];
        xor_cipher(temp, key, output + i);
        memcpy(iv, output + i, BLOCK_SIZE);
    }
}
void cfb_encrypt(uint8_t *data, int len, uint8_t *key, uint8_t *iv, uint8_t *output) {
    uint8_t cipher_out[BLOCK_SIZE];
    for (int i = 0; i < len; i += BLOCK_SIZE) {
        xor_cipher(iv, key, cipher_out);
        for (int j = 0; j < BLOCK_SIZE; j++)
            output[i + j] = data[i + j] ^ cipher_out[j];
        memcpy(iv, output + i, BLOCK_SIZE);
    }
}
void print_hex(const char *label, uint8_t *data, int len) {
    printf("%s: ", label);
    for (int i = 0; i < len; i++)
        printf("%02X ", data[i]);
    printf("\n");
}
int main() {
    uint8_t key[BLOCK_SIZE] = {0x1A, 0x2B, 0x3C, 0x4D, 0x5E, 0x6F, 0x70, 0x81};
    uint8_t iv1[BLOCK_SIZE] = {0x00};
    uint8_t iv2[BLOCK_SIZE] = {0x00};
    uint8_t iv3[BLOCK_SIZE] = {0x00};
    char message[] = "HELLO BLOCK WORLD!";
    uint8_t data[64];
    memset(data, 0, sizeof(data));
    memcpy(data, message, strlen(message));
    int padded_len = add_padding(data, strlen(message));
    uint8_t ecb_out[64], cbc_out[64], cfb_out[64];
    memset(ecb_out, 0, 64);
    memset(cbc_out, 0, 64);
    memset(cfb_out, 0, 64);
    ecb_encrypt(data, padded_len, key, ecb_out);
    cbc_encrypt(data, padded_len, key, iv1, cbc_out);
    cfb_encrypt(data, padded_len, key, iv2, cfb_out);
    print_hex("Plaintext", data, padded_len);
    print_hex("ECB Cipher", ecb_out, padded_len);
    print_hex("CBC Cipher", cbc_out, padded_len);
    print_hex("CFB Cipher", cfb_out, padded_len);
    return 0;
}
