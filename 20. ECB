#include <stdio.h>
#include <string.h>
#define BLOCK_SIZE 8
void xor_encrypt_block(unsigned char *block, unsigned char *key) {
    for (int i = 0; i < BLOCK_SIZE; i++) {
        block[i] ^= key[i];
    }
}
int main() {
    unsigned char key[BLOCK_SIZE] = {1, 2, 3, 4, 5, 6, 7, 8};
    unsigned char plaintext[] = "ThisIsBlock1ThisIsBlock2";   
    unsigned char ciphertext[32];
    unsigned char decrypted[32];
    int len = strlen((char *)plaintext);
    int blocks = len / BLOCK_SIZE;
    printf("Original Plaintext: %s\n", plaintext);
    for (int i = 0; i < blocks; i++) {
        memcpy(&ciphertext[i * BLOCK_SIZE], &plaintext[i * BLOCK_SIZE], BLOCK_SIZE);
        xor_encrypt_block(&ciphertext[i * BLOCK_SIZE], key);
    }
    printf("Ciphertext (hex): ");
    for (int i = 0; i < blocks * BLOCK_SIZE; i++) {
        printf("%02x", ciphertext[i]);
    }
    printf("\n");
    for (int i = 0; i < blocks; i++) {
        memcpy(&decrypted[i * BLOCK_SIZE], &ciphertext[i * BLOCK_SIZE], BLOCK_SIZE);
        xor_encrypt_block(&decrypted[i * BLOCK_SIZE], key); 
    }
    decrypted[blocks * BLOCK_SIZE] = '\0';
    printf("Decrypted Plaintext: %s\n", decrypted);
    return 0;
}
