#include <stdio.h>
#include <string.h>

#define BLOCK_SIZE 8

void xor_encrypt(unsigned char *block, unsigned char *key) {
    for (int i = 0; i < BLOCK_SIZE; i++)
        block[i] ^= key[i];
}

void xor_blocks(unsigned char *out, unsigned char *in1, unsigned char *in2) {
    for (int i = 0; i < BLOCK_SIZE; i++)
        out[i] = in1[i] ^ in2[i];
}

int main() {
    unsigned char key[BLOCK_SIZE] = {1,2,3,4,5,6,7,8};
    unsigned char iv[BLOCK_SIZE]  = {0xAA,0xBB,0xCC,0xDD,0x11,0x22,0x33,0x44};
    unsigned char plaintext[] = "CBCModeTestBlock1CBCModeTestBlock2";
    unsigned char ciphertext[64] = {0};
    unsigned char decrypted[64] = {0};

    int len = strlen((char *)plaintext);
    int num_blocks = (len + BLOCK_SIZE - 1) / BLOCK_SIZE; 

    printf("Plaintext: %s\n", plaintext);

    unsigned char prev[BLOCK_SIZE];
    memcpy(prev, iv, BLOCK_SIZE);

    for (int i = 0; i < num_blocks; i++) {
        unsigned char block[BLOCK_SIZE] = {0};
        int block_len = (i*BLOCK_SIZE + BLOCK_SIZE <= len) ? BLOCK_SIZE : len - i*BLOCK_SIZE;
        memcpy(block, &plaintext[i*BLOCK_SIZE], block_len);

        xor_blocks(block, block, prev);       
        xor_encrypt(block, key);               
        memcpy(&ciphertext[i*BLOCK_SIZE], block, BLOCK_SIZE);
        memcpy(prev, block, BLOCK_SIZE);
    }

    printf("Ciphertext (hex): ");
    for (int i = 0; i < num_blocks*BLOCK_SIZE; i++)
        printf("%02x", ciphertext[i]);
    printf("\n");

    memcpy(prev, iv, BLOCK_SIZE);
    for (int i = 0; i < num_blocks; i++) {
        unsigned char block[BLOCK_SIZE];
        memcpy(block, &ciphertext[i*BLOCK_SIZE], BLOCK_SIZE);
        xor_encrypt(block, key);              // Decrypt
        xor_blocks(&decrypted[i*BLOCK_SIZE], block, prev); 
        memcpy(prev, &ciphertext[i*BLOCK_SIZE], BLOCK_SIZE);
    }
    decrypted[len] = '\0';

    printf("Decrypted Text: %s\n", decrypted);

    return 0;
}
